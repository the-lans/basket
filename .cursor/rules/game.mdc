---
alwaysApply: true
---
Цель проекта:
- Создать производительную 2D игру в браузере с отрисовкой через HTML5 Canvas.
- Использовать современный CSS3 (градиенты, анимации) для UI/меню/оверлеев, Canvas — для игрового мира.
- Только Vanilla JavaScript (ES‑модули). Без фреймворков и игровых движков.
- Адаптивная верстка: игра корректно выглядит и управляется на десктопах и мобильных устройствах.

Запреты и ограничения:
- Не использовать React/Vue/Angular/Three.js/фреймворки/движки/DOM‑библиотеки.
- Не тянуть jQuery/GSAP/Anime.js. Анимации — только CSS и Canvas.
- Не использовать WebGL/Canvas 3D. Только 2D контекст Canvas.
- Не использовать eval/new Function и небезопасный динамический код.
- Минимизировать глобальные переменные (использовать ES‑модули).

Архитектура игры:
- Паттерн: Game Loop + Scenes (состояния) + Entities (сущности).
- Сцены: Boot → Preload → Menu → Game → Pause → GameOver. Каждая имеет методы: enter(payload?), exit(), update(dt), render(ctx, alpha), handleInput(event).
- Сущности: объект с методами update(dt) и render(ctx). Конфигурация через конструктор/фабрики. Хранить в менеджерах/массивах/спatial структуре.
- Ввод: единый слой InputManager (pointer events, клавиатура, тач), маппинг действий. Для мобильных — опциональный on-screen контроллер.
- Звук: AudioManager на Web Audio API, отложенный запуск (unlock) при первом пользовательском взаимодействии.
- Рендер: основной Canvas + оффскрин‑слои для статических фонов (OffscreenCanvas/буферный Canvas) при доступности.
- Логика обновления: фиксированный шаг физики и логики (fixed timestep) с интерполяцией рендера.

Структура проекта:
- index.html — минимальный HTML, подключение main.js, метатеги для мобильных, стили.
- design/ - дизайн проекта, наброски
- src/
  - core/ (Game, Loop, SceneManager, InputManager, AudioManager, AssetLoader, Math, Random, Logger)
  - scenes/ (BootScene, PreloadScene, MenuScene, GameScene, PauseScene, GameOverScene)
  - entities/ (Player, Enemy, Projectile, Particle, UI элементы)
  - systems/ (CollisionSystem, PhysicsSystem, ParticleSystem, SpatialGrid/Quadtree)
  - utils/ (helpers, easing, color, geometry)
  - main.js (инициализация игры)
- styles/
  - base.css (ресеты, переменные темing)
  - ui.css (меню, кнопки, HUD)
  - animations.css (keyframes)
- assets/
  - images/, audio/, fonts/, data/
- public/ (иконки, манифест, если потребуется)
- tests/ (юнит‑тесты утилит и систем)
- .editorconfig, .eslintrc.json, .prettierrc, .npmrc

Стандарты JavaScript:
- ES2020+ модули, strict mode по умолчанию.
- Использовать const/let, стрелочные функции, деструктуризацию, optional chaining.
- Типизация через JSDoc и //@ts-check для статической проверки без TypeScript.
- Единый стиль кода: Prettier + ESLint (eslint:recommended).
- Код разделять на небольшие модули. Без утечек глобального состояния.
- Магические числа вынести в constants/config.
- В public API модулей экспортировать только явные функции/классы, приватные — через замыкания или not-exported.

HTML и Canvas:
- Одна корневая обертка .app; Canvas — #game.
- Для Canvas учитывать devicePixelRatio:
  - CSS‑размер задается в логических пикселях (responsive).
  - Реальный размер: canvas.width = Math.round(cssWidth * dpr), canvas.height аналогично.
  - Контекст масштабировать один раз после ресайза или использовать setTransform(dpr,0,0,dpr,0,0).
- Отключать image smoothing для пиксель‑арт режимов при необходимости.
- requestAnimationFrame для рендера. При потере фокуса/visibilitychange — пауза и приглушение аудио.

CSS (градиенты, анимации, адаптив):
- Использовать CSS custom properties (переменные) для темы, цветов, размеров.
- Градиенты: linear-gradient/radial-gradient для фонов/кнопок; поддерживать светлую/темную схему через prefers-color-scheme и/или data-theme.
- Анимации: только transform/opacity для производительности. Избегать layout‑трогателей (top/left, box-shadow с большими blur).
- prefers-reduced-motion: отключать/упрощать анимации и частицы.
- Макет: flex/grid. Использовать clamp() для типографики и размеров.
- Контейнерные/медиазапросы для разных ориентаций и плотностей пикселей.
- UI слои (HUD, меню) — поверх canvas, pointer-events контролируются осмысленно.

Игровой цикл и время:
- Fixed timestep: fixedDelta = 1/60. Аккумулятор с clamp на кадр (например, ≤ 1/15), интерполяция для рендера.
- Логика привязана к fixedDelta, анимации частиц/интерполируемые позиции — через alpha.
- Троттлинг на слабых устройствах: упрощать эффекты (меньше частиц), пропускать декоративные апдейты.

Ввод:
- Pointer events (pointerdown/move/up/cancel), preventDefault в нужных местах, пассивные слушатели для скролла.
- Клавиатура: keydown/keyup, маппинг действий, поддержка WASD/стрелок, пробела/Enter/Escape.
- Touch: жесты с минимальным распознаванием (swipe/тач‑стик) при необходимости.
- На мобильных добавить опции чувствительности, вибрацию (navigator.vibrate) — опционально.

Ассеты и загрузка:
- Прелоадер: картинки (createImageBitmap при доступности), аудио (decodeAudioData), JSON уровней/спрайтшитов.
- Показывать прогресс. Ассеты кешировать через CacheStorage опционально (без обязательного SW).
- Версионирование ассетов через query параметр v=.

Коллизии и физика:
- Представления: AABB и круги. Для производительности — spatial hashing (grid) или quadtree.
- Простой откат-отталкивание или резолв пересечения без полного физдвижка.
- Расчеты в логических пикселях, независимо от DPR.
- Юнит‑тесты на пересечения (AABB‑AABB, circle‑circle, AABB‑circle).

Производительность:
- Профилировать и избегать лишних аллокаций в апдейте/рендере (пулы объектов для частиц/пуль).
- Минимизировать доступ к DOM; все вычисления — в JS/Canvas.
- Оффскрин‑канвас/буферный слой для статических фонов/тайлмапов.
- Ограничить общий объём JS ≤ 200 KB gzip (без учёта ассетов).
- Следить за 60 FPS; тяжелые эффекты понижать на слабых устройствах.

Доступность:
- В UI поддерживать навигацию с клавиатуры (tab/focus), видимый фокус.
- Контраст ≥ WCAG AA. Настройки: громкость, вибрация, чувствительность, режим «меньше анимаций».
- Текстовые подсказки управления. Для важных звуков — визуальные дубликаторы (иконки/мигание HUD).

Сохранения и настройки:
- localStorage с версией схемы. При изменении версии — миграция или сброс с предупреждением.
- Хранить: прогресс, лучшие результаты, настройки управления/звука/графики.

Ошибки и отладка:
- Глобальный обработчик ошибок/промисов. В dev‑режиме — наложение лога (overlay) и подробные ошибки в консоли.
- Logger с уровнями (debug/info/warn/error). В проде — минимальный вывод.

Инструменты и скрипты (без фреймворков):
- ES‑модули без сборки в dev (нативные импорты) + простой статический сервер.
- NPM‑скрипты:
  - dev: запуск локального сервера (например, http-server или serve).
  - lint: ESLint проверка.
  - format: Prettier.
  - typecheck: tsc —noEmit для JS с //@ts-check.
  - build (опционально): esbuild для минификации и копирования ассетов без трансформации кода.
- .editorconfig, .eslintrc.json (no-unused-vars, no-undef, eqeqeq, curly), .prettierrc (стандарт).

Критерии готовности (Definition of Done):
- Игра стабильно 60 FPS на средних устройствах, без видимых статтеров.
- Управление работает на десктопе и мобильных, есть подсказки и пауза.
- Поддержка DPR, корректное масштабирование, читаемый UI на всех размерах.
- Соответствие ESLint/Prettier, нет ошибок в консоли.
- Прелоадер, звуки (с регулировкой громкости), сохранение настроек.
- Тесты утилит/коллизий проходят.
- Проверено в Chrome, Firefox, Safari, Edge; на iOS/Android.
